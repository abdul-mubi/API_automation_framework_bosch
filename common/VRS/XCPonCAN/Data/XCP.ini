; ===========================================================================
[XCPonCAN]
; ===========================================================================

;; Execute payload hook scripts (see documentation)
;lua = <path to Lua payload hook script>
; Example: lua=c:\scripts\payload_hook.lua
; Default: none, payload hooks are disabled

;; Show all available hardware devices at startup
;list-hardware-devices =
; default: disabled

;; Use the hardware device identified by {uri} 
hardware-device={uri}
; Example: hardware-device=ETAS://ETH/ES593_D:2202370/CAN:4
; Default: unset (the VRS will not run unless this is set!)

;; Enable CAN-FD. This has to be supported by the chosen hardware!
;can-fd=
; Default: unset, attempt to use Classic CAN
;;; Optional, set CAN-FD operation mode:
;can-fd=iso
; Default: iso, use "pre-standard" to select legacy operation mode

;; Switch the log level of the standard output from "Info" to
;; "TraceData" (see below). THIS HAS SEVERE PERFORMANCE REPERCUSSIONS,
;; use only when absolutely necessary.
;verbose =
; Default: unset, only messages of level "Info" or higher are logged
;          to the standard output

; ------------------------------------------------------------------------
[Logging]
; ------------------------------------------------------------------------

;; Log file storage location
;Directory = C:\Temp
; Default: read ETAS log directory from the registry, fall back to the
;          local user application data directory.

;; The applicable log level for the log file, available with ascending
;; noisiness: Error, Warning, Info, ConfigInfo, TraceFunction, TraceData
;Level = Info
; Default: Info

;; How many (old, previous) logfiles to keep around?
;Keep = 5
; Default: 5

; ------------------------------------------------------------------------
[ECU]
; workarounds for issues, behavioral changes
; ------------------------------------------------------------------------

;ClockSkewFactorPercent = 0
; default: 0

;StartOnWorkingPage = yes
; default: yes, if set to "no" the initial page is the Reference Page

;AllowUnlimitedVirtualMemoryRead = no
; default: no, if set XCP-slave (ECU independent) memory reads are virtually
; unlimited in size (e.g. the response to GET_ID).

;AreEcuIdType1To4Valid = yes
; default: yes, if unset GET_ID types 1 to 4 are treated as "unsupported".

;EcuIdentifierFixedLength = 0
; default: 0, if set to any other value this is the length reported for
; identifiers transmitted with GET_ID

;IgnoreEcuAccessType = yes
; default: yes, if set to "no" the VRS will check if the configured
; access of a particular page (see the example below) is allowed
; from an ECU point-of-view in combination with the XCP access mode.

;KeepResumeFlag = no
; default: no, if set to "yes", the RESUME flag at DAQ lists is _not_
; reset when the ECU power is switched from OFF to ON.

;EnableClockCompensation = yes
; default: yes, if set to "no", internally detected scheduling delays will
; will not be "made up". This is sometimes useful when it must be ensured
; that no task will ever be activated after less than its configured period,
; e.g. when doing Bypass.

; ------------------------------------------------------------------------
;[MEMORY_SEGMENT.6.PAGE.0]
;                ^ Segment logical number in A2L
;                       ^ Page numer in A2L
; ------------------------------------------------------------------------

;ECU_ACCESS_TYPE = ECU_ACCESS_WITH_XCP_ONLY
; default: ECU_ACCESS_WITH_XCP_ONLY

;XCP_READ_ACCESS_TYPE = XCP_READ_ACCESS_WITH_ECU_ONLY
; default: XCP_READ_ACCESS_WITH_ECU_ONLY

;XCP_WRITE_ACCESS_TYPE = XCP_WRITE_ACCESS_NOT_ALLOWED
; default: XCP_WRITE_ACCESS_NOT_ALLOWED

; ------------------------------------------------------------------------
;[MEMORY_SEGMENT.6.PAGE.1]
;                ^ Segment logical number in A2L
;                       ^ Page numer in A2L
; ------------------------------------------------------------------------

;ECU_ACCESS_TYPE = ECU_ACCESS_WITH_XCP_ONLY
; default: ECU_ACCESS_WITH_XCP_ONLY

;XCP_READ_ACCESS_TYPE = XCP_READ_ACCESS_WITH_ECU_ONLY
; default: XCP_READ_ACCESS_WITH_ECU_ONLY

;XCP_WRITE_ACCESS_TYPE = XCP_WRITE_ACCESS_WITH_ECU_ONLY
; default: XCP_WRITE_ACCESS_WITH_ECU_ONLY

; ---------------------------------------------------------------------------
[XCP_ON_CAN]
; ---------------------------------------------------------------------------

;CAN_ID_MASTER=0x04F8
; default: 0x04F8, if given: use as default for STIM as well
;CAN_ID_SLAVE=0x0326
; default: 0x0326, if given: use as default for DAQ as well
BAUDRATE=500000
; default: 1000000
;SAMPLE_POINT=80
; default: 80
;SAMPLE_RATE = SINGLE
; possible values: SINGLE (default), TRIPLE
;BTL_CYCLES=10
; default: 10
;SJW=2
; default: 2
;SYNC_EDGE=SINGLE
; possible values: SINGLE (default), DUAL

; ---------------------------------------------------------------------------
[CAN_FD]
; ---------------------------------------------------------------------------

;CAN_FD_DATA_TRANSFER_BAUDRATE=2000000
; default: 2000000
;SAMPLE_POINT=80
; default: 80
;BTL_CYCLES=20
; default: 20
;SJW=4
; default: 4
;TRANSCEIVER_DELAY_COMPENSATION=ON
; possible values: ON (default), OFF
;SECONDARY_SAMPLE_POINT=80
; default: 80

; SYNC_EDGE is missing since there's no support for that in the CAN-FD 
; context within the VRS hardware access library

; ---------------------------------------------------------------------------
[DAQ_LIST_CAN_ID]
; ---------------------------------------------------------------------------
;
; These only apply when using static DAQ configuration
;
; * This requires slave and master id to be given as well
; 
; DAQ list number = CAN ID
;0=0x327 ; DAQ / Event 0
;1=0x326 ; DAQ / Event 1 (implicit)
;2=0x329 ; DAQ / Event 2
;3=0x326 ; DAQ / Event 5 (explicit)
;4=0x2F0 ; STIM / Event 3
;5=0x2F1 : STIM / Event 4
;6=0x4F8 ; STIM / Event 2 (implicit)
;7=0x4F8 ; STIM / Event 5 (implicit)

; ---------------------------------------------------------------------------
[EVENT_CAN_ID_LIST]
; ---------------------------------------------------------------------------
;
; These only apply when using dynamic DAQ configuration
;
; * These do only apply for direction DAQ
; * If this section is not present at all the defaults for static DAQs (see 
;   above) are used for dynamic DAQs, too.
; * If this section is present, all events (that are to be used) must be
;   configured
; * Assignment to invididual DAQs is effectively random (in case multiple
;	identifiers for one direction are given)
;
; Event number = ((DAQ|STIM):can-identifier)+
;4=DAQ:0x2f1
;0=DAQ:0x327
;5=DAQ:0x326,STIM:0x4f8
;1=DAQ:0x326
;3=DAQ:0x2f0
;2=DAQ:0x329,STIM:0x4f8
