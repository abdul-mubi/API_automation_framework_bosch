
##############  Version  ##############################################
[CAN]
#     The controller will be able to transmit CAN messages, and will 
#     acknowledge and transmit on the communications bus.
#     acknowledge any CAN messages which it receives.
#     on the communications bus. The controller will not be able to 
#     payload bytes which exceeded its capabilities with padding data.
#     payload which is longer than the maximum size supported by the 
#     payload. CAN-FD messages with DLC encodings of 9..15 are not supported. 
#     physical CAN controller, the controller is permitted to replace the 
#     transmit any CAN messages, and will not acknowledge any CAN messages 
#     which it receives.
#    Additionally to the ISO CAN specification required
#    ISO Can specification defines the use of a 
#    do not support three samples per bit. In this case 
#    into the receive queue if they were sent though 
#    into the receive queue if they were sent though 
#    recessive level change could be used.
#    recessive to dominant level change the dominant to
#    should be done on recessive to dominant level change.
#    single edge synchronization. The synchronization 
#    the default value of one sample per bit is used.
#    the same port. 
#    the same port. 
# 0 = CAN-FD disabled
# 0 = The transceiver delay compensation is disabled.
# 0: Specifies that the controller will not put frames 
# 1 = Specifies that the controller can only be used to listen, monitor 
# 1 = CAN-FD enabled
# 1 = The transceiver delay compensation is enabled.
# 1 = The controller does not receive CAN 2.0 messages.
# 1 = The controller does not receive CAN-FD messages.
# 1 = use CAN2.0 Frames only
# 1: Physical media is high speed CAN
# 1: Specifies that the controller will put frames 
# 1: Synchronization single edge. 
# 1: Use one sample per bit.
# 2 = Specifies that the controller can be used to listen, monitor, 
# 2 = The controller receives CAN 2.0 messages.
# 2 = The controller receives CAN-FD messages which have up to 8 bytes of 
# 2 = use CAN-FD Frames only
# 2: Physical media is fault tolerant CAN
# 2: Synchronization dual edge.
# 2: Use three samples per bit. Some CAN controllers 
# 4 = The controller receives CAN-FD messages.
# 4 = use CAN2.0 and CAN-FD Frames
# 8 = The controller receives CAN-FD messages. If one such message has a 

# BTL Cycles

# BTL cycles at the data bit rate
# Baudrate in MBit/s

# Bitrate used for the data bytes of the CAN-FD message.

# Configuration of the transceiver delay compensation.

# Configure various bus participation modes, which describe how a CAN 

# Configure whether the CAN-FD configuration should be used.

# Define how CAN 2.0 messages can be received by a CAN-FD controller.

# Define how CAN-FD messages are received.

# Define which messages can be transmitted.

# Length of the sync segment at data bit rate.

# Length of the sync segment.

# Number of samples per bit.

# Sample point in percent (0 .. 100).

# Sample point in percent (0..100) at the data bit rate. 
# Selecting a media which is not supported by the
# Some hardware support only one kind of media.

# Specification of the CAN physical media to use. 

# Specifies whether the CAN controller shall receive data 

# Synchronisation edge

# The offset used for transceiver delay compensation, measured as a 
# This is available ony for CAN controllers supporting OCICAN 1.3 or higher.
# This is only valid when txDelayCompensationControl is set to 1
# baudrate = 1000000 (changed)
# controller interacts with the CAN bus.
# hardware results in a configuration error.
# percentage of the data phase bit-time.
# sent through the same port.

##############  ISO-TP  ###############################################
BTL_Cycles = 10
SJW = 2
baudrate = 500000
busParticipationMode = 2
canFDConfig:canFdRxConfig:canFdRxMode = 4
canFDConfig:canFdRxConfig:canRxMode = 2
canFDConfig:canFdTxConfig = 4
canFDConfig:dataBTL_Cycles = 0
canFDConfig:dataBitRate = 2000000
canFDConfig:dataSJW = 4
canFDConfig:dataSamplePoint = 42
canFDConfig:txDelayCompensationControl = 1
canFDConfig:txSecondarySamplePointOffset = 42
canFDEnabled = 0
physicalMedia = 1
samplePoint = 80
samplesPerBit = 1
selfReceptionMode = 0
syncEdge = 2

[FREERUNNING_FAST]
CANID_PID0  = 0x690, 0x00
CANID_PID1  = 0x691, 0x01
CANID_PID10 = 0x69A, 0x0A
CANID_PID11 = 0x69B, 0x0B
CANID_PID12 = 0x69C, 0x0C
CANID_PID13 = 0x69D, 0x0D
CANID_PID14 = 0x69E, 0x0E
CANID_PID15 = 0x69F, 0x0F
CANID_PID2  = 0x692, 0x02
CANID_PID3  = 0x693, 0x03
CANID_PID4  = 0x694, 0x04
CANID_PID5  = 0x695, 0x05
CANID_PID6  = 0x696, 0x06
CANID_PID7  = 0x697, 0x07
CANID_PID8  = 0x698, 0x08
CANID_PID9  = 0x699, 0x09
Period		= 10000

[FREERUNNING_MEDIUM]
CANID_PID0  = 0x98DDF118, 0x08
CANID_PID1  = 0x98DDF119, 0x09
CANID_PID10 = 0x98DDF122, 0x12
CANID_PID11 = 0x98DDF123, 0x13
CANID_PID12 = 0x98DDF124, 0x14
CANID_PID13 = 0x98DDF125, 0x15
CANID_PID14 = 0x98DDF126, 0x16
CANID_PID15 = 0x98DDF127, 0x17
CANID_PID2  = 0x98DDF11a, 0x0a
CANID_PID3  = 0x98DDF11b, 0x0b
CANID_PID4  = 0x98DDF11c, 0x0c
CANID_PID5  = 0x98DDF11d, 0x0d
CANID_PID6  = 0x98DDF11e, 0x0e
CANID_PID7  = 0x98DDF11f, 0x0f
CANID_PID8  = 0x98DDF120, 0x10
CANID_PID9  = 0x98DDF121, 0x11
Period		= 50000
 
[FREERUNNING_SLOW]
CANID_PID0  = 0x6A0, 0x10
CANID_PID1  = 0x6A1, 0x11
CANID_PID10 = 0x6AA, 0x1A
CANID_PID11 = 0x6AB, 0x1B
CANID_PID12 = 0x6AC, 0x1C
CANID_PID13 = 0x6AD, 0x1D
CANID_PID14 = 0x6AE, 0x1E
CANID_PID15 = 0x6AF, 0x1F
CANID_PID2  = 0x6A2, 0x12
CANID_PID3  = 0x6A3, 0x13
CANID_PID4  = 0x6A4, 0x14
CANID_PID5  = 0x6A5, 0x15
CANID_PID6  = 0x6A6, 0x16
CANID_PID7  = 0x6A7, 0x17
CANID_PID8  = 0x6A8, 0x18
CANID_PID9  = 0x6A9, 0x19
Period		= 100000

[Hardware]
# Uniform Resource Identifier (URI) of the BOA device 
# hardware-device = ETAS://ETH/ES910.3:101166/CAN:1 (changed)
# used by the ECU Reference System.

##############  SharedMemory  ###########################################
hardware-device = ETAS://ETH/ES593_D:2202286/CAN:2

[ISO-TP]
#    The CAN/CAN-FD controller must be configured for CAN only, or for 
#    The CAN/CAN-FD controller must be configured for CAN-FD only, or for 
#    and unpadded flow control frames (FC) is accepted.
#    and unpadded single frames (SF) or consecutive 
#    consecutive frames (CF) with less than 8 bytes 
#    consecutive frames (CF) with less than 8 bytes 
#    frames (CF) are transmitted with the minimum number
#    frames (CF) is accepted.
#    mixed mode using CAN and CAN-FD.
#    mixed mode using CAN and CAN-FD.
#    of possible payload bytes.
#    of possible payload bytes.
#    padded (with 0) to a payload of 8 bytes.
#    payload are ignored.
#    payload are reported as an error.
#    payload of 8 bytes.
#    transmitted in CAN frames with the minimum number
#    with less than 8 bytes payload are ignored.
#    with less than 8 bytes payload are reported as an error.
# !!! UDSonCAN-FD Reference System does not support MaxPDUSize = 0 for Free Running Mode
# (ECU) will report the BSmax parameter according to this 
# (TX message CAN-ID of ECU RefSys = INCA RX CAN-ID)
# (TX message CAN-ID of INCA = ECU RefSys RX CAN-ID)
# (see ISO 15765-2:2011(E), page 26)
# (see ISO 15765-2:2011(E), page 26)
# (see ISO 15765-2:2011(E), page 26)
# (see ISO 15765-2:2011(E), page 26)
# (see ISO 15765-2:2011(E), page 27)
# (see ISO 15765-2:2011(E), page 27)
# (see ISO 15765-2:2011(E), page 27)
# (see ISO 15765-2:2011(E), page 27)
# (see ISO 15765-2:2011(E), page 27)
# (see ISO 15765-2:2011(E), page 38)
# (see ISO 15765-2:2011(E), page 38)
# (see ISO 15765-2:2011(E), page 38)
# (see ISO 15765-2:2011(E), page 38)
# 0: Automatic bus type detection.
# 0: No padding used. Flow control frames (FC) are 
# 0: No padding used. Single frames (SF) or consecutive 
# 0: Padding is ignored. The reception of padded 
# 0: Padding is ignored. The reception of padded 
# 0x00000000..0x0000007F: encoding in 0..127 milliseconds.
# 0x00000000..0x0000007F: encoding in 0..127 milliseconds.
# 0x000000F1..0x000000F9: encoding in 100..900 microseconds.
# 0x000000F1..0x000000F9: encoding in 100..900 microseconds.
# 0x00: The BS parameter value zero shall be used to 
# 0x01..0xFF: This range of BS parameter values shall be 
# 0x80000000..0x8001FFFF: encoding in 0..131071 microseconds. 
# 1: Flow control frames (FC) are padded (with 0) to a 
# 1: ISO-TP CAN is configured for CAN 2.0, according to ISO 11898.
# 1: Padding is active. Received flow control frames (FC)
# 1: Padding is active. Received single frames (SF) or 
# 1: Single frames (SF) or consecutive frames (CF) are 
# 2: ISO-TP CAN is configured for CAN-FD.
# 2: Padding checking. Received flow control frames (FC) 
# 2: Padding checking. Received single frames (SF) or 
# Address information (N_AI, N_TA or N_AE) when sending 

# Address information (N_AI, N_TA or N_AE) when sending 

# Bus type used by ISO-TP CAN.
# CAN are 0, 8. Valid values for CAN-FD are 0, 8, 12, 16, 20, 24, 32, 48, 64.
# Default value: 0
# Default value: 0
# Default value: 1
# Default value: 1
# Default value: 1
# Default value: 1
# In Free Running Mode the automatically detection does not work for the free running server. 

# Maximum block size on the receiver side. The receiver 

# Maximum block size on the sender side. The sender (ECU)

# Maximum number of FC.Wait frame transmissions.

# Maximum size for CAN-FD N-PDUs that can be transmitted. Valid values for 

# Maximum time for transmitting a flow control frame (FC).

# Maximum time for transmitting a single frame (SF), 

# Maximum time until reception of the next consecutive 

# Maximum time until reception of the next flow control 

# Padding when receiving flow control frames (FC).

# Padding when receiving single frames (SF) or 

# Padding when transmitting flow control frames (FC).

# Padding when transmitting single frames (SF) or 
# Range of value: 
# Range of value: 
# Range of value:
# Range of value:
# Range of value:
# Range of value:
# Range of value:
# Range of value: 0ms <= NAs_max <= 4095 ms
# Range of value: 0ms <= NAr_max <= 4095 ms
# Range of value: 0ms <= NBs_max <= 4095 ms
# Range of value: 0ms <= NCr_max <= 4095 ms
# Range of value: 0x00000000..0x000000FF
# Recommended value: -
# Recommended value: -
# Recommended value: 0
# Recommended value: 0
# Recommended value: 0
# Recommended value: 1000 ms
# Recommended value: 1000 ms
# Recommended value: 500 ms
# Recommended value: 500 ms
# So it will fail if it is not configured to the right value.

# The minimum time gap allowed between the transmissions 

# The minimum time gap allowed between the transmissions 
# The receiver (ECU) will report the minimal separation time 
# The sender (ECU) will ignore the STmin parameter 
# This address is used by INCA for sending 
# This address shall be used by the RefSys for sending 
# Using the value 0 causes ISO-TP CAN to automatically choose the maximum 
# a 1:1 connection.
# a message from client (INCA) to server (ECU).
# a message from server (ECU) to client (INCA).
# according to this setting in flow control frames (FC).
# and will use the configured value instead. 
# consecutive frames (CF) that can be received without an 
# consecutive frames (CF).
# consecutive frames (CF).
# control frame (FC) from a peer and use the defined value.
# entity shall send all remaining consecutive frames (CF) 
# first frame (FF) or consecutive frame (CF).
# flow control frame (FC) or acknowledgement frame (AF) 
# for further generation of flow control frames (FC).
# frame (CF). This parameter defines the timeout value in 
# frame (FC). This parameter defines the timeout in 
# frames (FC) shall be sent during the transmission of 
# from the receiving network layer entity.
# indicate to the sender that no more flow control 
# intermediate flow control frame (FC) from the receiving 
# milliseconds for waiting for a consecutive frame (CF) 
# milliseconds for waiting for a flow control frame (FC) 
# network entity.
# of two consecutive frames (CFs) on the receiver side. 
# of two consecutive frames (CFs) on the sender side. 
# on the receiver side.
# or acknowledgement frame (AF) on the sender side in 
# or first frame (FF-x in case of retry) after receiving 
# reported by the flow control frame (FC) from the peer 
# setting in flow control frame (FC) and use this setting 
# size of CAN-FD N-PDUs which can be transmitted.  
# the last consecutive frame (CF) or after sending an 
# the segmented message. The sending network layer 
# used to indicate to the sender the maximum number of 
# will ignore the BSmax parameter received in the flow 
# without any stop for further flow control frames (FC) 

##############  UDS  ##################################################
BSr_max = 0
BSs_max =
BusType = 1
ClientAddressInfo = 0x730
DF_Padding_Rx = 1
DF_Padding_Tx = 1
FC_Padding_Rx = 1
FC_Padding_Tx = 1
MaxPDUSize = 8
NAr_max = 500
NAs_max = 500
NBs_max = 1000
NCr_max = 1000
STr_min = 0
STs_min =
ServerAddressInfo = 0x750
WFT_max = 0

[MemorySegment0]
BaseAddress = 0x7F8000
SegmentName = VARIABLE
Size = 0x48000
Type = SignalSimulation

[MemorySegment1]
# Changed New Param - "NumOfPages = 2"
BaseAddress = 0x00020000
NumOfPages = 2
SegmentName = FLASH
Size = 0x5E0000
[RoutineControl]

# Flag indicates switch to RP triggered by Clear Memory
# Implicit_Switch2RP_ClearMemory = true (No pos. effect with false but changed)
# Local Routine Identifier to trigger checksum calculation

# Local Routine Identifier to trigger copy WP to RP

# Local Routine Identifier to trigger page switch

# Local Routine Identifier to trigger when Clear Memory

##############  Triggering  ###########################################
Identifier_Checksum   = 0xFF01
Identifier_ClearMemory = 0xFF00
Identifier_CopyWPtoRP = 0xF001
Identifier_PageSwitch = 0xF002
Implicit_Switch2RP_ClearMemory = false

[SharedMemory]

##############  MemorySegment  ###########################################
#Valid Shared Memory Name
SharedMemoryName = MyEcu_CAN5

[Signal0]
# counter_uint8_R01.R01
Address     =  0x7FB688
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UBYTE

[Signal1]
# counter_sint8_R01.R01
Address     =  0x7FB686
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  SBYTE

[Signal10]
# sint32_01.E_sint32.R01_B
Address     =  0x822A18
ByteOrder   =  MSB_FIRST
Function    =  Inc(16843009)
Max         =  1073741823
Min         =  -1073741824
StartValue  =  1073741800
Type        =  SLONG

[Signal11]
# fl32_01.E_fl32.R01_B
Address     =  0x8229B8
ByteOrder   =  MSB_FIRST
Function    =  Inc(1111.111)
StartValue  =  1.23456
Type        =  FLOAT32_IEEE

[Signal12]
# fl64_01.E_fl64.R01_B
Address     =  0x8229D8
ByteOrder   =  MSB_FIRST
Function    =  Inc(1111.111)
StartValue  =  1.23456
Type        =  FLOAT64_IEEE

[Signal13] 
# uint8_01.E_uint8.R01
Address     =  0x8228B0
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UBYTE

[Signal14] 
# sint8_01.E_sint8.R01
Address     =  0x822898
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  SBYTE

[Signal15] 
# uint16_01.E_uint16.R01
Address     =  0x8228A0
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UWORD

[Signal16] 
# sint16_01.E_sint16.R01
Address     =  0x822888
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  SWORD

[Signal17] 
# counter_uint8_R02.R02
Address     =  0x7FB6C0
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UBYTE

[Signal18] 
# counter_sint8_R02.R02
Address     =  0x7FB6BE
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  SBYTE

[Signal19] 
# counter_uint16_R02.R02
Address     =  0x7FB6BC
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UWORD

[Signal2]
# counter_uint16_R01.R01
Address     =  0x7FB684
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UWORD

[Signal20] 
# counter_sint16_R02.R02
Address     =  0x7FB6BA
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  SWORD

[Signal21] 
# uint16_02.I_uint16.R02
Address     =  0x7FB6A4
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UWORD

[Signal22]
# uint32_02.I_uint32.R02_B
Address     =  0x7F8E7C
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  ULONG

[Signal23]
# sint32_02.I_sint32.R02_B
Address     =  0x7F8E5C
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Max         =  1073741823
Min         =  -1073741824
Type        =  SLONG

[Signal24]
# fl32_02.I_fl32.R02_B
Address     =  0x7F8DFC
ByteOrder   =  MSB_FIRST
Function    =  Inc(1.0)
Type        =  FLOAT32_IEEE

[Signal25]
# fl64_02.I_fl64.R02_B
Address     =  0x7F8E20
ByteOrder   =  MSB_FIRST
Function    =  Inc(1.0)
Type        =  FLOAT64_IEEE

[Signal26]
# uint32_02.E_uint32.R02_B
Address     =  0x822B0C
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
StartValue  =  4294967200
Type        =  ULONG

[Signal27]
# sint32_02.E_sint32.R02_B
Address     =  0x822AEC
ByteOrder   =  MSB_FIRST
Function    =  Inc(16843009)
Max         =  1073741823
Min         =  -1073741824
StartValue  =  1073741800
Type        =  SLONG

[Signal28]
# fl32_02.E_fl32.R02_B
Address     =  0x822A8C
ByteOrder   =  MSB_FIRST
Function    =  Inc(1111.111)
StartValue  =  1.23456
Type        =  FLOAT32_IEEE

[Signal29]
# fl64_02.E_fl64.R02_B
Address     =  0x822AB0
ByteOrder   =  MSB_FIRST
Function    =  Inc(1111.111)
StartValue  =  1.23456
Type        =  FLOAT64_IEEE

[Signal3]
# counter_sint16_R01.R01
Address     =  0x7FB682
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  SWORD

[Signal30] 
# uint8_02.E_uint8.R02
Address     =  0x822A81
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UBYTE

[Signal31] 
# sint8_02.E_sint8.R02
Address     =  0x822A69
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  SBYTE

[Signal32] 
# uint16_02.E_uint16.R02
Address     =  0x822A72
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
StartValue  =  65400
Type        =  UWORD

[Signal33] 
# sint16_02.E_sint16.R02
Address     =  0x822A5A
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
StartValue  =  32700
Type        =  SWORD

[Signal34] 
# counter_uint8_R03.R03
Address     =  0x7FB6F7
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UBYTE

[Signal35] 
# counter_sint8_R03.R03
Address     =  0x7FB6F6
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  SBYTE

[Signal36] 
# counter_uint16_R03.R03
Address     =  0x7FB6F4
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UWORD

[Signal37] 
# counter_sint16_R03.R03
Address     =  0x7FB6F2
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  SWORD

[Signal38] 
# uint16_03.I_uint16.R03
Address     =  0x7FB6DE
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UWORD

[Signal39]
# uint32_03.I_uint32.R03_B
Address     =  0x7F8F20
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  ULONG

[Signal4] 
# uint16_01.I_uint16.R01
Address     =  0x7FB66A
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  UWORD

[Signal40]
# sint32_03.I_sint32.R03_B
Address     =  0x7F8F00
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Max         =  1073741823
Min         =  -1073741824
Type        =  SLONG

[Signal41]
# fl32_03.I_fl32.R03_B
Address     =  0x7F8EA0
ByteOrder   =  MSB_FIRST
Function    =  Inc(1.0)
Type        =  FLOAT32_IEEE

[Signal42]
# fl64_03.I_fl64.R03_B
Address     =  0x7F8EC8
ByteOrder   =  MSB_FIRST
Function    =  Inc(1.0)
Type        =  FLOAT64_IEEE

[Signal43]
# uint32_03.E_uint32.R03_B
Address     =  0x822BE0
ByteOrder   =  MSB_FIRST
Function    =  Inc(-1)
StartValue  =  200
Type        =  ULONG

[Signal44]
# sint32_03.E_sint32.R03_B
Address     =  0x822BC0
ByteOrder   =  MSB_FIRST
Function    =  Inc(-16843009)
Max         =  1073741823
Min         =  -1073741824
StartValue  =  -1073741800
Type        =  SLONG

[Signal45]
# fl32_03.E_fl32.R03_B
Address     =  0x822B60
ByteOrder   =  MSB_FIRST
Function    =  Inc(-1111.111)
StartValue  =  -1.23456
Type        =  FLOAT32_IEEE

[Signal46]
# fl64_03.E_fl64.R03_B
Address     =  0x822B88
ByteOrder   =  MSB_FIRST
Function    =  Inc(-1111.111)
StartValue  =  -1.23456
Type        =  FLOAT64_IEEE

[Signal47] 
# uint8_03.E_uint8.R03
Address     =  0x822B52
ByteOrder   =  MSB_FIRST
Function    =  Inc(-1)
StartValue  =  2
Type        =  UBYTE

[Signal48] 
# sint8_03.E_sint8.R03
Address     =  0x822B3A
ByteOrder   =  MSB_FIRST
Function    =  Inc(-1)
StartValue  =  2
Type        =  SBYTE

[Signal49] 
# uint16_03.E_uint16.R03
Address     =  0x822B44
ByteOrder   =  MSB_FIRST
Function    =  Inc(-1)
StartValue  =  2
Type        =  UWORD

[Signal5]
# uint32_01.I_uint32.R01_B
Address     =  0x7F8DD8
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  ULONG

[Signal50] 
# sint16_03.E_sint16.R03
Address     =  0x822B2C
ByteOrder   =  MSB_FIRST
Function    =  Inc(-1)
StartValue  =  -32700
Type        =  SWORD

[Signal51] 
# i_0x21_rdbli_kwp_u32.C_ClassDiagCounter.DiagKwpUds
Address     =  0x7FB380
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  ULONG

[Signal52] 
# i_0x22_rdbli_uds_u32.C_ClassDiagCounter.DiagKwpUds
Address     =  0x7FB384
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  ULONG

[Signal53] 
# i_0x23_rmba_u32.C_ClassDiagCounter.DiagKwpUds
Address     =  0x7FB388
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Type        =  ULONG

[Signal54]
# TimeSignal_F64_MSB_FIRST
Address     =  0x823738
ByteOrder   =  MSB_FIRST
Function    =  Time()
StartValue  =  0
Type        =  FLOAT64_IEEE

[Signal55]
# TimeSignal_F64_MSB_LAST
Address     =  0x823740
ByteOrder   =  MSB_LAST
Function    =  Time()
StartValue  =  0
Type        =  FLOAT64_IEEE

[Signal56]
# TimeSignal_F32_MSB_FIRST not supported yet
Address     =  0x823748
ByteOrder   =  MSB_FIRST
Function    =  Time()
StartValue  =  0
Type        =  FLOAT32_IEEE

[Signal57]
# TimeSignal_F32_MSB_LAST not supported yet
Address     =  0x82374C
ByteOrder   =  MSB_LAST
Function    =  Time()
StartValue  =  0
Type        =  FLOAT32_IEEE

[Signal6]
# sint32_01.I_sint32.R01_B
Address     =  0x7F8DB8
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
Max         =  1073741823
Min         =  -1073741824
Type        =  SLONG

[Signal7]
# fl32_01.I_fl32.R01_B
Address     =  0x7F8D58
ByteOrder   =  MSB_FIRST
Function    =  Inc(1.0)
Type        =  FLOAT32_IEEE

[Signal8]
# fl64_01.I_fl64.R01_B
Address     =  0x7F8D78
ByteOrder   =  MSB_FIRST
Function    =  Inc(1.0)
Type        =  FLOAT64_IEEE

[Signal9]
# uint32_01.E_uint32.R01_B
Address     =  0x822A38
ByteOrder   =  MSB_FIRST
Function    =  Inc(1)
StartValue  =  4294967200
Type        =  ULONG

[StartDiagnosticSession]

##############  Signals ########################################
COPY_PARA=0x03
RAM_InitByTool=0x41

[Trigger0]
# read EPK
Action0 = CreateResponse("50 02 00 32 01 F4")
TriggerMask  = "FF FF"
TriggerValue = "10 02"

[Trigger1]
# read EPK
Action0 = CreateResponse("67 03 00 9A AB C0")
TriggerMask  = "FF FF"
TriggerValue = "27 03"

[Trigger2]
# read EPK

##############  CAN - Controller Configuration  #######################
#Action0 = CreateResponse("71 01 FF 00 01 01")
#TriggerMask  = "FF FF FF FF FF FF"
#TriggerValue = "31 01 FF 00 01 01"

#[Trigger3]
Action0 = CreateResponse("67 04")
TriggerMask  = "FF FF FF FF FF FF"
TriggerValue = "27 04 00 9A AB C0"

[UDS]
#    hybrid based on windows timer queues for the part of the
#    hybrid consisting of boost::this_thread::sleep_for() for the 
#    interrupted if required and if used with boost thread context.
#    part of the spin loop. Both segments of the hybrid can be 
#    sleep time in excess of 2000us and a spin loop. 
#    std::this_thread::sleep_for(). 
# (each with negative response code 0x78) shall be 
# (see ISO/FDIS 14229-2:2011, page 10)
# (see ISO/FDIS 14229-2:2011, page 13)
# -: BoostInterruptableSleep - Sleep function consisting of a 
# -: ETASTimeSleep - Sleep function provided by ETAS Time. 
# -: StdThreadSleep - Sleep function making use of 
# -: TimerQueueSpinLoopHybridSleep - function consisting of a 
# -: WindowsSleep - Sleep function provided by the windows api. 
# Default value: BoostInterruptableSleep 
# Different implementations have differing accuracy and in 
# During the enhanced response timing, the minimum time 

# Maximum time for the server (ECU) to start 

# Maximum time for the server (ECU) to start with the 

# Maximum time for the server to keep a diagnostic session 

# Minimum time for the client to wait after the successful 

# Minimum time for the server (ECU) to start 

# Minimum time for the server (ECU) to start with the 
# P2*Server_min = 0.3 * P2*Server_max, in order to avoid 
# Range of value: 0 < MaxNumberOfBlockLength <= 0xFFF
# Range of value: 0 ms <= P2Server_min <= P2Server_max
# Range of value: 0 ms <= P2*Server_min < P2*Server_max
# Range of value: 0 ms <= P2*Server_min < P2*Server_max
# Range of value: P2Server_min <= P2Server_max <= P3Client_Phys
# Recommended value: 0 ms
# Recommended value: 1500 ms
# Recommended value: 50 ms
# Recommended value: 5000 ms
# Recommended value: 5000 ms
# Recommended value: P2Server_max
# The supported timer implementations are:
# This length reflects the complete message length, including 

# This parameter is used to define which timer implementation 

# This parameter is used to inform the client how many 
# any diagnostic request message.
# between the transmission of consecutive negative messages 
# code 0x78 messages. (see ISO/FDIS 14229-2:2011, page 10)
# data bytes (MaxNumberOfBlockLength) shall be included 
# flooding the data link with unnecessary negative response 
# in each TransferData request message from the client. 
# in the TransferData request message. This parameter allows 
# increased CPU utilization.
# is used by the virtual reference system so as to schedule 
# message. (see ISO/FDIS 14229-2:2011, page 10)
# most cases an increase in accuracy comes at a cost of 
# next physically or functionally addressed request 
# other than the default session active while not receiving 
# request message. (see ISO/FDIS 14229-2:2011, page 10)
# request message. (see ISO/FDIS 14229-2:2011, page 10)
# response message after the transmission of a negative 
# response message after the transmission of a negative 
# response message with negative response code 0x78.
# response message with negative response code 0x78.
# server before it starts transferring data to the server.
# the client to adapt to the receive buffer size of the 
# the service identifier and the data parameters present 
# the transmission of the FreeRunning periodic measurements.
# transmission of a physically addressed request message 
# with no response required before it can transmit the 
# with the response message after the reception of a 
# with the response message after the reception of a 
MaxNumberOfBlockLength = 0xFFF
P2*Server_max = 5000
P2*Server_min = 1500
P2Server_max = 50
P2Server_min = 0
P3Client_Phys = 50
S3Server_max = 5000
TimerImplementation = BoostInterruptableSleep

[Version]
# Version = 0.6 (changed)
# Version of this INI file. This is used to check and 
# different versions.
# handle the configuration information and features in 

##############  Hardware  #############################################
Version = 0.5

[VirtualMemory]

##############  Routine Control ########################################
write-memory-page0 = WR_ES740_5.hex
