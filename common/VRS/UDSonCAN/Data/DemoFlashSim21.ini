
##############  Version  ##############################################

[Version]
# Version of this INI file. This is used to check and 
# handle the configuration information and features in 
# different versions.
# Version = 0.6 (changed)
Version = 0.5

##############  Hardware  #############################################

[Hardware]
# Uniform Resource Identifier (URI) of the BOA device 
# used by the ECU Reference System.
# hardware-device = ETAS://ETH/ES910.3:101166/CAN:1 (changed)
hardware-device = ETAS://USB/ES581.4:2200082/CAN:1
#hardware-device = ETAS://USB/ES581.4:2204147/CAN:1

##############  SharedMemory  ###########################################

[SharedMemory]
#Valid Shared Memory Name
SharedMemoryName = MyEcu_CAN21

##############  MemorySegment  ###########################################

[MemorySegment0]
SegmentName = FLASH
BaseAddress = 0x019F4000
Size = 0x2FC8
NumOfPages = 2

[MemorySegment1]
SegmentName = FLASH
BaseAddress = 0x01DC0000
Size = 0x87C0
NumOfPages = 2

[MemorySegment2]
SegmentName = FLASH
BaseAddress = 0x01DB0000
Size = 0x3000
NumOfPages = 2

[MemorySegment3]
SegmentName = FLASH
BaseAddress = 0x22036000
Size = 0x100
# Size in LUA for KeyFile = 0 not allowed set to 0x100######
NumOfPages = 2

[MemorySegment4]
SegmentName = FLASH
BaseAddress = 0x01DF0000
Size = 0x12288
NumOfPages = 2

[MemorySegment5]
SegmentName = FLASH
BaseAddress = 0x01A20000
Size = 0x29E68F
NumOfPages = 2






[VirtualMemory]
#write-memory-page0 = C:\Special-SW\UDSonCAN_1p1p5\Data\DemoFlash.hex
write-memory-page0 = DemoFlash_newRan_21.hex

##############  Routine Control ########################################
[RoutineControl]
# Local Routine Identifier to trigger checksum calculation
Identifier_Checksum   = 0xFF01

# Local Routine Identifier to trigger page switch
Identifier_PageSwitch = 0xF002

# Local Routine Identifier to trigger copy WP to RP
Identifier_CopyWPtoRP = 0xF001

# Local Routine Identifier to trigger when Clear Memory
Identifier_ClearMemory = 0xFF00

# Flag indicates switch to RP triggered by Clear Memory
# Implicit_Switch2RP_ClearMemory = true (No pos. effect with false but changed)
Implicit_Switch2RP_ClearMemory = false

##############  Triggering  ###########################################
[Trigger0]
# read EPK
TriggerMask  = "FF FF"
TriggerValue = "10 01"
Action0 = CreateResponse("50 01")

[Trigger1]
# read EPK
TriggerMask  = "FF FF"
TriggerValue = "10 02"
Action0 = CreateResponse("50 02")

[Trigger2]
# read EPK
TriggerMask  = "FF FF"
TriggerValue = "10 03"
Action0 = CreateResponse("50 03")

[Trigger3]
# read EPK
TriggerMask  = "FF FF"
TriggerValue = "11 01"
Action0 = CreateResponse("51 01")




[Trigger4]
# read EPK
TriggerMask  = "FF FF"
TriggerValue = "27 01"
Action0 = CreateResponse("670198C3E167")

[Trigger5]
# read EPK
TriggerMask  = "FF FF FF FF FF FF"
TriggerValue = "27 02 E1 5B 16 3A"
Action0 = CreateResponse("6702")

[Trigger6]
# read EPK
TriggerMask  = "FFFF"
TriggerValue = "2703"
#Action0 = CreateResponse("67032D7CE3DB")
Action0 = CreateResponse("670305071970")

[Trigger7]
# read EPK
TriggerMask  = "FFFFFFFFFFFF"
TriggerValue = "2704C0F433E7"
Action0 = CreateResponse("6704")

[Trigger8]
# read EPK
TriggerMask  = "FFFF"
TriggerValue = "2705"
Action0 = CreateResponse("6705FA67BE59")

[Trigger9]
# read EPK
TriggerMask  = "FFFFFFFFFFFF"
TriggerValue = "2706D3A323C9"
Action0 = CreateResponse("6706")






[Trigger10]
# read EPK
TriggerMask  = "FFFFFF"
TriggerValue = "22F121"
Action0 = CreateResponse("62F12132313735343533")

[Trigger11]
# read EPK
TriggerMask  = "FFFFFF"
TriggerValue = "22F189"
Action0 = CreateResponse("62F189564543555F5031303130315F315F33315F315F3420202020202020202020")

[Trigger12]
# read EPK
TriggerMask  = "FFFFFF"
TriggerValue = "22F18C"
Action0 = CreateResponse("62F18C3031303831300000")

[Trigger13]
# read EPK
TriggerMask  = "FFFFFF"
TriggerValue = "221EAB"
Action0 = CreateResponse("7F2231")





[Trigger14]
# read EPK
TriggerMask  = "FFFFFF"
TriggerValue = "22F194"
Action0 = CreateResponse("62f1940d4d4442542e424d2020202020020007564543552e464c4420202020020062564543552e4d535720202020010203564543552e52542020202020062501564543552e424153455f5357029501564543552e4347454e202020062501564543552e4d444220202020000928564543552e50494644617461010203564543552e44454d44617461010101564543552e43414e436f6e66010203564543552e434f4e544941455300014653432e53572e41555820200420004653432e5061726120202020415000")


# + logfile requests#########################################
[Trigger15]
# 
TriggerMask  = "FF FF FF FF FF"
TriggerValue = "31 01 FF 00 01"
Action0 = CreateResponse("7101FF000000")

[Trigger16]
# Upload_Download_Request
TriggerMask  = "FF FF FF FF"
TriggerValue = "31 01 FF 01"
Action0 = CreateResponse("71 01 FF 01 00 00 00 00")

#[Trigger17]
# Upload_Download_Request
#TriggerMask  = "FF FF FF FF FF FF FF FF FF FF FF"
#TriggerValue = "34 01 44 22 03 60 00 00 00 03 C0"
#Action0 = CreateResponse("74 20 00 FF")

[Trigger17]
# Upload_Download_Request
TriggerMask  = "FF 0F FF"
TriggerValue = "34 01 44"
Action0 = CreateResponse("74 20 08 FF")






##############  CAN - Controller Configuration  #######################
[CAN]
# Baudrate in MBit/s
# baudrate = 1000000 (changed)
baudrate = 500000

# Sample point in percent (0 .. 100).
samplePoint = 80

# Number of samples per bit.
# 1: Use one sample per bit.
# 2: Use three samples per bit. Some CAN controllers 
#    do not support three samples per bit. In this case 
#    the default value of one sample per bit is used.
samplesPerBit = 1

# BTL Cycles
BTL_Cycles = 10

# Length of the sync segment.
SJW = 2

# Synchronisation edge
# 1: Synchronization single edge. 
#    ISO Can specification defines the use of a 
#    single edge synchronization. The synchronization 
#    should be done on recessive to dominant level change.
# 2: Synchronization dual edge.
#    Additionally to the ISO CAN specification required
#    recessive to dominant level change the dominant to
#    recessive level change could be used.
syncEdge = 2

# Specification of the CAN physical media to use. 
# Some hardware support only one kind of media.
# Selecting a media which is not supported by the
# hardware results in a configuration error.
# 1: Physical media is high speed CAN
# 2: Physical media is fault tolerant CAN
physicalMedia = 1

# Specifies whether the CAN controller shall receive data 
# sent through the same port.
# 0: Specifies that the controller will not put frames 
#    into the receive queue if they were sent though 
#    the same port. 
# 1: Specifies that the controller will put frames 
#    into the receive queue if they were sent though 
#    the same port. 
selfReceptionMode = 0

# Configure various bus participation modes, which describe how a CAN 
# controller interacts with the CAN bus.
# 1 = Specifies that the controller can only be used to listen, monitor 
#     on the communications bus. The controller will not be able to 
#     transmit any CAN messages, and will not acknowledge any CAN messages 
#     which it receives.
# 2 = Specifies that the controller can be used to listen, monitor, 
#     acknowledge and transmit on the communications bus.
#     The controller will be able to transmit CAN messages, and will 
#     acknowledge any CAN messages which it receives.
busParticipationMode = 2

# Configure whether the CAN-FD configuration should be used.
# This is available ony for CAN controllers supporting OCICAN 1.3 or higher.
# 0 = CAN-FD disabled
# 1 = CAN-FD enabled
canFDEnabled = 0

# Bitrate used for the data bytes of the CAN-FD message.
canFDConfig:dataBitRate = 2000000

# Sample point in percent (0..100) at the data bit rate. 
canFDConfig:dataSamplePoint = 42

# BTL cycles at the data bit rate
canFDConfig:dataBTL_Cycles = 0

# Length of the sync segment at data bit rate.
canFDConfig:dataSJW = 4

# Configuration of the transceiver delay compensation.
# 0 = The transceiver delay compensation is disabled.
# 1 = The transceiver delay compensation is enabled.
canFDConfig:txDelayCompensationControl = 1

# The offset used for transceiver delay compensation, measured as a 
# percentage of the data phase bit-time.
# This is only valid when txDelayCompensationControl is set to 1
canFDConfig:txSecondarySamplePointOffset = 42

# Define how CAN 2.0 messages can be received by a CAN-FD controller.
# 1 = The controller does not receive CAN 2.0 messages.
# 2 = The controller receives CAN 2.0 messages.
canFDConfig:canFdRxConfig:canRxMode = 2

# Define how CAN-FD messages are received.
# 1 = The controller does not receive CAN-FD messages.
# 2 = The controller receives CAN-FD messages which have up to 8 bytes of 
#     payload. CAN-FD messages with DLC encodings of 9..15 are not supported. 
# 4 = The controller receives CAN-FD messages.
# 8 = The controller receives CAN-FD messages. If one such message has a 
#     payload which is longer than the maximum size supported by the 
#     physical CAN controller, the controller is permitted to replace the 
#     payload bytes which exceeded its capabilities with padding data.
canFDConfig:canFdRxConfig:canFdRxMode = 4

# Define which messages can be transmitted.
# 1 = use CAN2.0 Frames only
# 2 = use CAN-FD Frames only
# 4 = use CAN2.0 and CAN-FD Frames
canFDConfig:canFdTxConfig = 4

##############  ISO-TP  ###############################################

[ISO-TP]
# Address information (N_AI, N_TA or N_AE) when sending 
# a message from client (INCA) to server (ECU).
# This address is used by INCA for sending 
# (TX message CAN-ID of INCA = ECU RefSys RX CAN-ID)
ServerAddressInfo = 0x98DA21F9

# Address information (N_AI, N_TA or N_AE) when sending 
# a message from server (ECU) to client (INCA).
# This address shall be used by the RefSys for sending 
# (TX message CAN-ID of ECU RefSys = INCA RX CAN-ID)
ClientAddressInfo = 0x98DAF921

# The minimum time gap allowed between the transmissions 
# of two consecutive frames (CFs) on the sender side. 
# The sender (ECU) will ignore the STmin parameter 
# reported by the flow control frame (FC) from the peer 
# and will use the configured value instead. 
# (see ISO 15765-2:2011(E), page 26)
# Range of value: 
# 0x00000000..0x0000007F: encoding in 0..127 milliseconds.
# 0x000000F1..0x000000F9: encoding in 100..900 microseconds.
# 0x80000000..0x8001FFFF: encoding in 0..131071 microseconds. 
# Recommended value: -
STs_min =

# The minimum time gap allowed between the transmissions 
# of two consecutive frames (CFs) on the receiver side. 
# The receiver (ECU) will report the minimal separation time 
# according to this setting in flow control frames (FC).
# (see ISO 15765-2:2011(E), page 26)
# Range of value: 
# 0x00000000..0x0000007F: encoding in 0..127 milliseconds.
# 0x000000F1..0x000000F9: encoding in 100..900 microseconds.
# Recommended value: 0
STr_min = 0

# Maximum block size on the sender side. The sender (ECU)
# will ignore the BSmax parameter received in the flow 
# control frame (FC) from a peer and use the defined value.
# (see ISO 15765-2:2011(E), page 26)
# Recommended value: -
BSs_max =

# Maximum block size on the receiver side. The receiver 
# (ECU) will report the BSmax parameter according to this 
# setting in flow control frame (FC) and use this setting 
# for further generation of flow control frames (FC).
# (see ISO 15765-2:2011(E), page 26)
# Range of value:
# 0x00: The BS parameter value zero shall be used to 
# indicate to the sender that no more flow control 
# frames (FC) shall be sent during the transmission of 
# the segmented message. The sending network layer 
# entity shall send all remaining consecutive frames (CF) 
# without any stop for further flow control frames (FC) 
# from the receiving network layer entity.
# 0x01..0xFF: This range of BS parameter values shall be 
# used to indicate to the sender the maximum number of 
# consecutive frames (CF) that can be received without an 
# intermediate flow control frame (FC) from the receiving 
# network entity.
# Recommended value: 0
BSr_max = 0

# Maximum number of FC.Wait frame transmissions.
# (see ISO 15765-2:2011(E), page 27)
# Range of value: 0x00000000..0x000000FF
# Recommended value: 0
WFT_max = 0

# Maximum time for transmitting a flow control frame (FC).
# (see ISO 15765-2:2011(E), page 27)
# Range of value: 0ms <= NAs_max <= 4095 ms
# Recommended value: 500 ms
NAs_max = 500

# Maximum time for transmitting a single frame (SF), 
# first frame (FF) or consecutive frame (CF).
# (see ISO 15765-2:2011(E), page 27)
# Range of value: 0ms <= NAr_max <= 4095 ms
# Recommended value: 500 ms
NAr_max = 500

# Maximum time until reception of the next flow control 
# frame (FC). This parameter defines the timeout in 
# milliseconds for waiting for a flow control frame (FC) 
# or acknowledgement frame (AF) on the sender side in 
# a 1:1 connection.
# (see ISO 15765-2:2011(E), page 27)
# Range of value: 0ms <= NBs_max <= 4095 ms
# Recommended value: 1000 ms
NBs_max = 1000

# Maximum time until reception of the next consecutive 
# frame (CF). This parameter defines the timeout value in 
# milliseconds for waiting for a consecutive frame (CF) 
# or first frame (FF-x in case of retry) after receiving 
# the last consecutive frame (CF) or after sending an 
# flow control frame (FC) or acknowledgement frame (AF) 
# on the receiver side.
# (see ISO 15765-2:2011(E), page 27)
# Range of value: 0ms <= NCr_max <= 4095 ms
# Recommended value: 1000 ms
NCr_max = 1000

# Padding when transmitting flow control frames (FC).
# (see ISO 15765-2:2011(E), page 38)
# Range of value:
# 0: No padding used. Flow control frames (FC) are 
#    transmitted in CAN frames with the minimum number
#    of possible payload bytes.
# 1: Flow control frames (FC) are padded (with 0) to a 
#    payload of 8 bytes.
# Default value: 1
FC_Padding_Rx = 1

# Padding when receiving flow control frames (FC).
# (see ISO 15765-2:2011(E), page 38)
# Range of value:
# 0: Padding is ignored. The reception of padded 
#    and unpadded flow control frames (FC) is accepted.
# 1: Padding is active. Received flow control frames (FC)
#    with less than 8 bytes payload are ignored.
# 2: Padding checking. Received flow control frames (FC) 
#    with less than 8 bytes payload are reported as an error.
# Default value: 1
FC_Padding_Tx = 1

# Padding when receiving single frames (SF) or 
# consecutive frames (CF).
# (see ISO 15765-2:2011(E), page 38)
# Range of value:
# 0: Padding is ignored. The reception of padded 
#    and unpadded single frames (SF) or consecutive 
#    frames (CF) is accepted.
# 1: Padding is active. Received single frames (SF) or 
#    consecutive frames (CF) with less than 8 bytes 
#    payload are ignored.
# 2: Padding checking. Received single frames (SF) or 
#    consecutive frames (CF) with less than 8 bytes 
#    payload are reported as an error.
# Default value: 1
DF_Padding_Rx = 1

# Padding when transmitting single frames (SF) or 
# consecutive frames (CF).
# (see ISO 15765-2:2011(E), page 38)
# Range of value:
# 0: No padding used. Single frames (SF) or consecutive 
#    frames (CF) are transmitted with the minimum number
#    of possible payload bytes.
# 1: Single frames (SF) or consecutive frames (CF) are 
#    padded (with 0) to a payload of 8 bytes.
# Default value: 1
DF_Padding_Tx = 1

# Bus type used by ISO-TP CAN.
# 0: Automatic bus type detection.
# 1: ISO-TP CAN is configured for CAN 2.0, according to ISO 11898.
#    The CAN/CAN-FD controller must be configured for CAN only, or for 
#    mixed mode using CAN and CAN-FD.
# 2: ISO-TP CAN is configured for CAN-FD.
#    The CAN/CAN-FD controller must be configured for CAN-FD only, or for 
#    mixed mode using CAN and CAN-FD.
# Default value: 0
BusType = 1

# Maximum size for CAN-FD N-PDUs that can be transmitted. Valid values for 
# CAN are 0, 8. Valid values for CAN-FD are 0, 8, 12, 16, 20, 24, 32, 48, 64.
# Using the value 0 causes ISO-TP CAN to automatically choose the maximum 
# size of CAN-FD N-PDUs which can be transmitted.  
# Default value: 0
# !!! UDSonCAN-FD Reference System does not support MaxPDUSize = 0 for Free Running Mode
# In Free Running Mode the automatically detection does not work for the free running server. 
# So it will fail if it is not configured to the right value.
MaxPDUSize = 8

##############  UDS  ##################################################

[UDS]

# This parameter is used to define which timer implementation 
# is used by the virtual reference system so as to schedule 
# the transmission of the FreeRunning periodic measurements.
# Different implementations have differing accuracy and in 
# most cases an increase in accuracy comes at a cost of 
# increased CPU utilization.
# The supported timer implementations are:
# -: WindowsSleep - Sleep function provided by the windows api. 
# -: ETASTimeSleep - Sleep function provided by ETAS Time. 
# -: BoostInterruptableSleep - Sleep function consisting of a 
#    hybrid consisting of boost::this_thread::sleep_for() for the 
#    part of the spin loop. Both segments of the hybrid can be 
#    interrupted if required and if used with boost thread context.
# -: StdThreadSleep - Sleep function making use of 
#    std::this_thread::sleep_for(). 
# -: TimerQueueSpinLoopHybridSleep - function consisting of a 
#    hybrid based on windows timer queues for the part of the
#    sleep time in excess of 2000us and a spin loop. 
# Default value: BoostInterruptableSleep 
TimerImplementation = BoostInterruptableSleep

# This parameter is used to inform the client how many 
# data bytes (MaxNumberOfBlockLength) shall be included 
# in each TransferData request message from the client. 
# This length reflects the complete message length, including 
# the service identifier and the data parameters present 
# in the TransferData request message. This parameter allows 
# the client to adapt to the receive buffer size of the 
# server before it starts transferring data to the server.
# Range of value: 0 < MaxNumberOfBlockLength <= 0xFFF
MaxNumberOfBlockLength = 0xFFF

# Minimum time for the server (ECU) to start 
# with the response message after the reception of a 
# request message. (see ISO/FDIS 14229-2:2011, page 10)
# Range of value: 0 ms <= P2Server_min <= P2Server_max
# Recommended value: 0 ms
P2Server_min = 0

# Maximum time for the server (ECU) to start 
# with the response message after the reception of a 
# request message. (see ISO/FDIS 14229-2:2011, page 10)
# Range of value: P2Server_min <= P2Server_max <= P3Client_Phys
# Recommended value: 50 ms
P2Server_max = 50

# Minimum time for the server (ECU) to start with the 
# response message after the transmission of a negative 
# response message with negative response code 0x78.
# During the enhanced response timing, the minimum time 
# between the transmission of consecutive negative messages 
# (each with negative response code 0x78) shall be 
# P2*Server_min = 0.3 * P2*Server_max, in order to avoid 
# flooding the data link with unnecessary negative response 
# code 0x78 messages. (see ISO/FDIS 14229-2:2011, page 10)
# Range of value: 0 ms <= P2*Server_min < P2*Server_max
# Recommended value: 1500 ms
P2*Server_min = 1500

# Maximum time for the server (ECU) to start with the 
# response message after the transmission of a negative 
# response message with negative response code 0x78.
# (see ISO/FDIS 14229-2:2011, page 10)
# Range of value: 0 ms <= P2*Server_min < P2*Server_max
# Recommended value: 5000 ms
P2*Server_max = 5000

# Minimum time for the client to wait after the successful 
# transmission of a physically addressed request message 
# with no response required before it can transmit the 
# next physically or functionally addressed request 
# message. (see ISO/FDIS 14229-2:2011, page 10)
# Recommended value: P2Server_max
P3Client_Phys = 50

# Maximum time for the server to keep a diagnostic session 
# other than the default session active while not receiving 
# any diagnostic request message.
# (see ISO/FDIS 14229-2:2011, page 13)
# Recommended value: 5000 ms
S3Server_max = 5000
 
[FREERUNNING_SLOW]
Period		= 100000
CANID_PID0  = 0x6A0, 0x10
CANID_PID1  = 0x6A1, 0x11
CANID_PID2  = 0x6A2, 0x12
CANID_PID3  = 0x6A3, 0x13
CANID_PID4  = 0x6A4, 0x14
CANID_PID5  = 0x6A5, 0x15
CANID_PID6  = 0x6A6, 0x16
CANID_PID7  = 0x6A7, 0x17
CANID_PID8  = 0x6A8, 0x18
CANID_PID9  = 0x6A9, 0x19
CANID_PID10 = 0x6AA, 0x1A
CANID_PID11 = 0x6AB, 0x1B
CANID_PID12 = 0x6AC, 0x1C
CANID_PID13 = 0x6AD, 0x1D
CANID_PID14 = 0x6AE, 0x1E
CANID_PID15 = 0x6AF, 0x1F

[FREERUNNING_MEDIUM]
Period		= 50000
CANID_PID0  = 0x98DDF118, 0x08
CANID_PID1  = 0x98DDF119, 0x09
CANID_PID2  = 0x98DDF11a, 0x0a
CANID_PID3  = 0x98DDF11b, 0x0b
CANID_PID4  = 0x98DDF11c, 0x0c
CANID_PID5  = 0x98DDF11d, 0x0d
CANID_PID6  = 0x98DDF11e, 0x0e
CANID_PID7  = 0x98DDF11f, 0x0f
CANID_PID8  = 0x98DDF120, 0x10
CANID_PID9  = 0x98DDF121, 0x11
CANID_PID10 = 0x98DDF122, 0x12
CANID_PID11 = 0x98DDF123, 0x13
CANID_PID12 = 0x98DDF124, 0x14
CANID_PID13 = 0x98DDF125, 0x15
CANID_PID14 = 0x98DDF126, 0x16
CANID_PID15 = 0x98DDF127, 0x17

[FREERUNNING_FAST]
Period		= 10000
CANID_PID0  = 0x690, 0x00
CANID_PID1  = 0x691, 0x01
CANID_PID2  = 0x692, 0x02
CANID_PID3  = 0x693, 0x03
CANID_PID4  = 0x694, 0x04
CANID_PID5  = 0x695, 0x05
CANID_PID6  = 0x696, 0x06
CANID_PID7  = 0x697, 0x07
CANID_PID8  = 0x698, 0x08
CANID_PID9  = 0x699, 0x09
CANID_PID10 = 0x69A, 0x0A
CANID_PID11 = 0x69B, 0x0B
CANID_PID12 = 0x69C, 0x0C
CANID_PID13 = 0x69D, 0x0D
CANID_PID14 = 0x69E, 0x0E
CANID_PID15 = 0x69F, 0x0F

[StartDiagnosticSession]
RAM_InitByTool=0x41
COPY_PARA=0x03

##############  Signals ########################################

[Signal0]
# counter_uint8_R01.R01
Type        =  UBYTE
Address     =  0x7FB688
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal1]
# counter_sint8_R01.R01
Type        =  SBYTE
Address     =  0x7FB686
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal2]
# counter_uint16_R01.R01
Type        =  UWORD
Address     =  0x7FB684
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal3]
# counter_sint16_R01.R01
Type        =  SWORD
Address     =  0x7FB682
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal4] 
# uint16_01.I_uint16.R01
Type        =  UWORD
Address     =  0x7FB66A
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal5]
# uint32_01.I_uint32.R01_B
Type        =  ULONG
Address     =  0x7F8DD8
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal6]
# sint32_01.I_sint32.R01_B
Type        =  SLONG
Address     =  0x7F8DB8
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST
Min         =  -1073741824
Max         =  1073741823

[Signal7]
# fl32_01.I_fl32.R01_B
Type        =  FLOAT32_IEEE
Address     =  0x7F8D58
Function    =  Inc(1.0)
ByteOrder   =  MSB_FIRST

[Signal8]
# fl64_01.I_fl64.R01_B
Type        =  FLOAT64_IEEE
Address     =  0x7F8D78
Function    =  Inc(1.0)
ByteOrder   =  MSB_FIRST

[Signal9]
# uint32_01.E_uint32.R01_B
Type        =  ULONG
Address     =  0x822A38
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST
StartValue  =  4294967200

[Signal10]
# sint32_01.E_sint32.R01_B
Type        =  SLONG
Address     =  0x822A18
Function    =  Inc(16843009)
ByteOrder   =  MSB_FIRST
StartValue  =  1073741800
Min         =  -1073741824
Max         =  1073741823

[Signal11]
# fl32_01.E_fl32.R01_B
Type        =  FLOAT32_IEEE
Address     =  0x8229B8
Function    =  Inc(1111.111)
ByteOrder   =  MSB_FIRST
StartValue  =  1.23456

[Signal12]
# fl64_01.E_fl64.R01_B
Type        =  FLOAT64_IEEE
Address     =  0x8229D8
Function    =  Inc(1111.111)
ByteOrder   =  MSB_FIRST
StartValue  =  1.23456

[Signal13] 
# uint8_01.E_uint8.R01
Type        =  UBYTE
Address     =  0x8228B0
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal14] 
# sint8_01.E_sint8.R01
Type        =  SBYTE
Address     =  0x822898
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal15] 
# uint16_01.E_uint16.R01
Type        =  UWORD
Address     =  0x8228A0
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal16] 
# sint16_01.E_sint16.R01
Type        =  SWORD
Address     =  0x822888
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal17] 
# counter_uint8_R02.R02
Type        =  UBYTE
Address     =  0x7FB6C0
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal18] 
# counter_sint8_R02.R02
Type        =  SBYTE
Address     =  0x7FB6BE
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal19] 
# counter_uint16_R02.R02
Type        =  UWORD
Address     =  0x7FB6BC
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal20] 
# counter_sint16_R02.R02
Type        =  SWORD
Address     =  0x7FB6BA
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal21] 
# uint16_02.I_uint16.R02
Type        =  UWORD
Address     =  0x7FB6A4
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal22]
# uint32_02.I_uint32.R02_B
Type        =  ULONG
Address     =  0x7F8E7C
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal23]
# sint32_02.I_sint32.R02_B
Type        =  SLONG
Address     =  0x7F8E5C
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST
Min         =  -1073741824
Max         =  1073741823

[Signal24]
# fl32_02.I_fl32.R02_B
Type        =  FLOAT32_IEEE
Address     =  0x7F8DFC
Function    =  Inc(1.0)
ByteOrder   =  MSB_FIRST

[Signal25]
# fl64_02.I_fl64.R02_B
Type        =  FLOAT64_IEEE
Address     =  0x7F8E20
Function    =  Inc(1.0)
ByteOrder   =  MSB_FIRST

[Signal26]
# uint32_02.E_uint32.R02_B
Type        =  ULONG
Address     =  0x822B0C
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST
StartValue  =  4294967200

[Signal27]
# sint32_02.E_sint32.R02_B
Type        =  SLONG
Address     =  0x822AEC
Function    =  Inc(16843009)
ByteOrder   =  MSB_FIRST
StartValue  =  1073741800
Min         =  -1073741824
Max         =  1073741823

[Signal28]
# fl32_02.E_fl32.R02_B
Type        =  FLOAT32_IEEE
Address     =  0x822A8C
Function    =  Inc(1111.111)
ByteOrder   =  MSB_FIRST
StartValue  =  1.23456

[Signal29]
# fl64_02.E_fl64.R02_B
Type        =  FLOAT64_IEEE
Address     =  0x822AB0
Function    =  Inc(1111.111)
ByteOrder   =  MSB_FIRST
StartValue  =  1.23456

[Signal30] 
# uint8_02.E_uint8.R02
Type        =  UBYTE
Address     =  0x822A81
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal31] 
# sint8_02.E_sint8.R02
Type        =  SBYTE
Address     =  0x822A69
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal32] 
# uint16_02.E_uint16.R02
Type        =  UWORD
Address     =  0x822A72
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST
StartValue  =  65400

[Signal33] 
# sint16_02.E_sint16.R02
Type        =  SWORD
Address     =  0x822A5A
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST
StartValue  =  32700

[Signal34] 
# counter_uint8_R03.R03
Type        =  UBYTE
Address     =  0x7FB6F7
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal35] 
# counter_sint8_R03.R03
Type        =  SBYTE
Address     =  0x7FB6F6
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal36] 
# counter_uint16_R03.R03
Type        =  UWORD
Address     =  0x7FB6F4
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal37] 
# counter_sint16_R03.R03
Type        =  SWORD
Address     =  0x7FB6F2
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal38] 
# uint16_03.I_uint16.R03
Type        =  UWORD
Address     =  0x7FB6DE
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal39]
# uint32_03.I_uint32.R03_B
Type        =  ULONG
Address     =  0x7F8F20
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal40]
# sint32_03.I_sint32.R03_B
Type        =  SLONG
Address     =  0x7F8F00
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST
Min         =  -1073741824
Max         =  1073741823

[Signal41]
# fl32_03.I_fl32.R03_B
Type        =  FLOAT32_IEEE
Address     =  0x7F8EA0
Function    =  Inc(1.0)
ByteOrder   =  MSB_FIRST

[Signal42]
# fl64_03.I_fl64.R03_B
Type        =  FLOAT64_IEEE
Address     =  0x7F8EC8
Function    =  Inc(1.0)
ByteOrder   =  MSB_FIRST

[Signal43]
# uint32_03.E_uint32.R03_B
Type        =  ULONG
Address     =  0x822BE0
Function    =  Inc(-1)
ByteOrder   =  MSB_FIRST
StartValue  =  200

[Signal44]
# sint32_03.E_sint32.R03_B
Type        =  SLONG
Address     =  0x822BC0
Function    =  Inc(-16843009)
ByteOrder   =  MSB_FIRST
StartValue  =  -1073741800
Min         =  -1073741824
Max         =  1073741823

[Signal45]
# fl32_03.E_fl32.R03_B
Type        =  FLOAT32_IEEE
Address     =  0x822B60
Function    =  Inc(-1111.111)
ByteOrder   =  MSB_FIRST
StartValue  =  -1.23456

[Signal46]
# fl64_03.E_fl64.R03_B
Type        =  FLOAT64_IEEE
Address     =  0x822B88
Function    =  Inc(-1111.111)
ByteOrder   =  MSB_FIRST
StartValue  =  -1.23456

[Signal47] 
# uint8_03.E_uint8.R03
Type        =  UBYTE
Address     =  0x822B52
Function    =  Inc(-1)
ByteOrder   =  MSB_FIRST
StartValue  =  2

[Signal48] 
# sint8_03.E_sint8.R03
Type        =  SBYTE
Address     =  0x822B3A
Function    =  Inc(-1)
ByteOrder   =  MSB_FIRST
StartValue  =  2

[Signal49] 
# uint16_03.E_uint16.R03
Type        =  UWORD
Address     =  0x822B44
Function    =  Inc(-1)
ByteOrder   =  MSB_FIRST
StartValue  =  2

[Signal50] 
# sint16_03.E_sint16.R03
Type        =  SWORD
Address     =  0x822B2C
Function    =  Inc(-1)
ByteOrder   =  MSB_FIRST
StartValue  =  -32700

[Signal51] 
# i_0x21_rdbli_kwp_u32.C_ClassDiagCounter.DiagKwpUds
Type        =  ULONG
Address     =  0x7FB380
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal52] 
# i_0x22_rdbli_uds_u32.C_ClassDiagCounter.DiagKwpUds
Type        =  ULONG
Address     =  0x7FB384
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal53] 
# i_0x23_rmba_u32.C_ClassDiagCounter.DiagKwpUds
Type        =  ULONG
Address     =  0x7FB388
Function    =  Inc(1)
ByteOrder   =  MSB_FIRST

[Signal54]
# TimeSignal_F64_MSB_FIRST
Type        =  FLOAT64_IEEE
Address     =  0x823738
Function    =  Time()
ByteOrder   =  MSB_FIRST
StartValue  =  0

[Signal55]
# TimeSignal_F64_MSB_LAST
Type        =  FLOAT64_IEEE
Address     =  0x823740
Function    =  Time()
ByteOrder   =  MSB_LAST
StartValue  =  0

[Signal56]
# TimeSignal_F32_MSB_FIRST not supported yet
Type        =  FLOAT32_IEEE
Address     =  0x823748
Function    =  Time()
ByteOrder   =  MSB_FIRST
StartValue  =  0

[Signal57]
# TimeSignal_F32_MSB_LAST not supported yet
Type        =  FLOAT32_IEEE
Address     =  0x82374C
Function    =  Time()
ByteOrder   =  MSB_LAST
StartValue  =  0
