/*
  Software Update

  This API Section holds messages used for installing software somewhere in the vehicle and tracking that process.  For reporting detailed results or logs a Logs Upload Event can be used, which is defined in the API section Device Management. To indicate that the log upload event belongs to the context of an Software update, the value of context in the Logs Upload Event should be set to softwareupdate by convention.

  The version of the OpenAPI document: 2

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

import public "backend_to_device_message_meta.proto";

message UpdateCommand {

  BackendToDeviceMessageMeta meta = 3347973;

  // URI (Uniform Resource Identifier) of the update artifact. {scheme}://{path} The scheme of the uri identifies the technology of the object storage. The device knows the address (location) of the object storage. The path identifies the update artifact relative to the location. If the scheme contains a basic technology/protocol such as http(s), the device interprets the artifactUri as an ordinary download URL.  Examples: * s3://{bucket name}/{group name}/{update-artifact} * bosch-cs://blobs/{objectId}
  string artifactUri = 56320456;

  // URI (Uniform Resource Identifier) of the address (location) of the server which provides the update artifact. If no location is given, then the device uses the pre-configured object storage which releates to the scheme (technology) of the update artifact.  Example: https://cloudstore.bosch-cs.com
  string baseUri = 332625701;

  // Size of the artifact in bytes
  int64 artifactSizeBytes = 174739257;

  Checksums checksums = 399518864;

  // Artifact specific encryption key (BASE64-encoded) required to decrypt the artifact on the device side. The Artifact Decryption Key is itself encrypted with a device specific public key as can be extracted from the device's TLS certificate. Format is based on CMS as per RFC 5652.
  string artifactDecryptionKey = 185736277;

  OrchestrationLogic orchestrationLogic = 113101411;

}


message Checksums {

  // SHA1 Checksum
  string sha1 = 3528965;

  // MD5 Checksum
  string md5 = 107902;

}

message OrchestrationLogic {

  // This flag decides whether the device waits for manager approval before performing the update. Defaults to false.
  bool managerApprovalRequired = 191996724;

}
