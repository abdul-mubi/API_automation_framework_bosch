name: Sonar Scan

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened]

jobs:
  run-sonar-scan:
    runs-on: [ BCN ]
    
    env:
      SONAR_SCANNER_VERSION: 4.6.2.2472
      HTTP_PROXY: http://172.17.0.1:3128
      HTTPS_PROXY: http://172.17.0.1:3128
      FTP_PROXY: http://172.17.0.1:3128

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
    - name: Set up Sonar Scanner
      run: |
        cd ${{ runner.temp }}
        curl -X GET https://rb-artifactory.bosch.com/artifactory/sde-applications-local/sonarqube/sonar-scanner/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}.zip -o sonar-scanner-cli.zip
        unzip sonar-scanner-cli.zip
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Java
      uses: actions/setup-java@v3
      id: java
      with:
        distribution: adopt
        java-version: "11"
    - name: Bosch CA Keystore import
      shell: bash
      run: |
        if keytool -list -v -keystore ${{ steps.java.outputs.path }}/lib/security/cacerts -storepass "changeit" | grep 'Alias name:' | grep -i Bosch-CA; then
          echo Bosch CA already exists in Java keystore: ${{ steps.java.outputs.path }}/lib/security/cacerts
        else
          echo Bosch CA doest not exist in Java keystore: ${{ steps.java.outputs.path }}/lib/security/cacerts going to import it!
          true | openssl s_client -connect ews-esz-emea.api.bosch.com:443 2>/dev/null | openssl x509 > bosch-ca.pem
          keytool -import -noprompt -trustcacerts -alias Bosch-CA -file bosch-ca.pem -keystore ${{ steps.java.outputs.path }}/lib/security/cacerts -storepass "changeit"
        fi
    - name: Run Sonar Scan
      id: sonar-scan
      shell: bash
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        PROJECT_KEY: com.bosch.sdv.mc.vms
        PROJECT_NAME: E2E TEST
        SONAR_SOURCES: .
        SOURCE_ENCODING: UTF-8
      run: |
        export LANG="en_US.UTF-8"
        export LC_ALL="en_US.UTF-8"
        export LC_CTYPE="en_US.UTF-8"
        export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF-8"
        ${{ runner.temp }}/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}/bin/sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=$SONAR_HOST_URL \
          -Dsonar.projectName="${PROJECT_NAME}" -Dsonar.projectKey="${PROJECT_KEY}" -Dsonar.working.directory="$PWD/sonar" -Dsonar.sourceEncoding=$SOURCE_ENCODING \
          -Dsonar.links.issue="https://rb-tracker.bosch.com/tracker15/browse/ARTMC" \
          -Dsonar.links.ci=${{ github.server_url }}/${{ github.repository }}/actions \
          -Dsonar.links.scm=${{ github.server_url }}/${{ github.repository }} \
          -Dsonar.sources=$SONAR_SOURCES
    - name: Analyze Sonar Scan Results
      id: sonar-metrics
      shell: bash
      run: |
        # for all available metrics see https://docs.sonarqube.org/latest/user-guide/metric-definitions/
        sleep 5s
        if [ "${{github.event_name}}" == "workflow_dispatch" ]; then
          echo "SONAR SCAN is triggered on a Branch"
          curl -X GET -H "Accept: application/json" -u 61898fb2be439b291ac2ba1e8c2cf1269d8a531d: "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=com.bosch.sdv.mc.vms&metricKeys=alert_status,quality_gate_details,new_code_smells,code_smells,new_bugs,bugs,new_vulnerabilities,vulnerabilities,complexity,new_security_hotspots,security_hotspots,violations&branch=${GITHUB_REF#refs/*/}" -o sonar-metrics.json
        elif [ "${{github.event_name}}" == "pull_request" ]; then
          echo "SONAR SCAN is triggered due to Pull-Request"
          curl -X GET -H "Accept: application/json" -u 61898fb2be439b291ac2ba1e8c2cf1269d8a531d: "${{ secrets.SONAR_HOST_URL }}/api/measures/component?component=com.bosch.sdv.mc.vms&metricKeys=alert_status,quality_gate_details,new_code_smells,code_smells,new_bugs,bugs,new_vulnerabilities,vulnerabilities,complexity,new_security_hotspots,security_hotspots,violations&pullRequest=${{github.event.number}}" -o sonar-metrics.json
        else
          echo ${{github.event_name}}
          echo "SONAR SCAN was not triggered as part of workflow/PR"
          exit 1
        fi
        CODE_SMELLS=$(cat sonar-metrics.json | jq -r '.component.measures[] | select(.metric=="code_smells") | .value')
        NEW_CODE_SMELLS=$(cat sonar-metrics.json | jq -r '.component.measures[] | select(.metric=="new_code_smells") | .value')
        NEW_CODE_SMELLS=${NEW_CODE_SMELLS:-0}
        BUGS=$(cat sonar-metrics.json | jq -r '.component.measures[] | select(.metric=="bugs") | .value')
        NEW_BUGS=$(cat sonar-metrics.json | jq -r '.component.measures[] | select(.metric=="new_bugs") | .value')
        NEW_BUGS=${NEW_BUGS:-0}
        VULNERABILITIES=$(cat sonar-metrics.json | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value')
        NEW_VULNERABILITIES=$(cat sonar-metrics.json | jq -r '.component.measures[] | select(.metric=="new_vulnerabilities") | .value')
        NEW_VULNERABILITIES=${NEW_VULNERABILITIES:-0}
        SECURITY_HOTSPOTS=$(cat sonar-metrics.json | jq -r '.component.measures[] | select(.metric=="security_hotspots") | .value')
        NEW_SECURITY_HOTSPOTS=$(cat sonar-metrics.json | jq -r '.component.measures[] | select(.metric=="new_security_hotspots") | .value')
        NEW_SECURITY_HOTSPOTS=${NEW_SECURITY_HOTSPOTS:-0}
        QUALITY_GATE_STATUS=$(cat sonar-metrics.json | jq -r '.component.measures[] | select(.metric=="alert_status") | .value')
        echo "bugs=$BUGS" >> $GITHUB_OUTPUT
        echo "new_bugs=$NEW_BUGS" >> $GITHUB_OUTPUT
        echo "code_smells=$CODE_SMELLS" >> $GITHUB_OUTPUT
        echo "new_code_smells=$NEW_CODE_SMELLS" >> $GITHUB_OUTPUT
        echo "duplicated_lines=$DUPLICATED_LINES" >> $GITHUB_OUTPUT
        echo "security_hotspots=$SECURITY_HOTSPOTS" >> $GITHUB_OUTPUT
        echo "new_security_hotspots=$NEW_SECURITY_HOTSPOTS" >> $GITHUB_OUTPUT
        echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
        echo "new_vulnerabilities=$NEW_VULNERABILITIES" >> $GITHUB_OUTPUT
        
        if [[ ! "$QUALITY_GATE_STATUS" == "OK" ]]; then
          echo "::error::The Quality Gate failed. Check the results in Sonarqube"
          exit 1
        fi     
    - name: Archive Sonar Scan Results
      if: ${{ always() && steps.sonar-scan.outcome != 'cancelled' && steps.sonar-scan.outcome != 'skipped' }}
      uses: actions/upload-artifact@v3
      with:
        name: "Sonar Report"
        path: |
          sonar-metrics.json
        retention-days: 7
